@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Book Now";
}

@section Styles {
    <link rel="stylesheet" href="~/css/book.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css" />
}

<!-- Hero Banner -->
<section class="hero">
    <h1>Plan Your Dream Trip</h1>
    <p>Fill in your preferences to create your ideal travel plan.</p>
</section>

<!-- Trip Booking Form -->
<div class="booking-card">
    <form id="bookNowForm">
        <label for="destination">Destination:</label>
        <input type="text" id="destination" name="destination" placeholder="Enter destination" required />

        <label for="country">Country:</label>
        <input type="text" id="country" name="country" placeholder="Enter country" required />

        <label for="duration">Duration:</label>
        <input type="text" id="duration" name="duration" placeholder="e.g. 5 Days" required />

        <label for="budget">Budget:</label>
        <input type="number" id="budget" name="budget" placeholder="e.g. 1500" required />

        <label for="mode">Mode of Travel:</label>
        <select id="mode" name="mode" required>
            <option value="">--Select--</option>
        </select>

        <button type="submit">Save Trip</button>
        <button type="reset" onclick="cancelEdit()">Cancel</button>
    </form>
</div>

<!-- Weather Info -->
<div id="weatherInfo" style="margin-top: 30px; font-weight: bold; font-size: 16px;"></div>

<!-- Saved Trips Table -->
<div id="savedTripsSection" style="margin-top: 40px;">
    <h3 style="text-align: center;">Saved Trips</h3>
    <table id="savedTripsTable" style="margin: 0 auto; width: 90%; border-collapse: collapse;">
        <thead style="background: #b2dfdb;">
            <tr>
                <th>Destination</th>
                <th>Country</th>
                <th>Duration</th>
                <th>Budget</th>
                <th>Mode</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script>
        const isLoggedIn = '@User.Identity.IsAuthenticated'.toLowerCase() === 'true';
        async function loadTravelModes() {
            try {
                const res = await fetch("/api/travelmodes");
                const modes = await res.json();
                const select = document.getElementById("mode");
                modes.forEach(mode => {
                    const option = document.createElement("option");
                    option.value = mode.id;
                    option.textContent = mode.name;
                    select.appendChild(option);
                });
            } catch (error) {
                console.error("Failed to load travel modes:", error);
                alert("Could not load travel modes.");
            }
        }

        async function fetchWeather(countryName) {
            try {
                const countryRes = await fetch(`https://restcountries.com/v3.1/name/${countryName}`);
                const countryData = await countryRes.json();
                const lat = countryData[0].latlng[0];
                const lon = countryData[0].latlng[1];

                const weatherRes = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current_weather=true`);
                const weatherData = await weatherRes.json();
                const weather = weatherData.current_weather;

                document.getElementById("weatherInfo").innerHTML = `
                    <strong>Weather in ${countryName}</strong><br>
                    Temperature: ${weather.temperature}°C<br>
                    Wind Speed: ${weather.windspeed} km/h
                `;
            } catch (err) {
                console.error("Weather fetch failed:", err);
                document.getElementById("weatherInfo").innerText = "Could not fetch weather.";
            }
        }

        document.getElementById("bookNowForm").addEventListener("submit", async function (e) {
            if (!isLoggedIn) {
                e.preventDefault();
                Swal.fire({
                    icon: 'warning',
                    title: 'Login Required',
                    text: 'You must be logged in to book a trip.',
                    confirmButtonColor: '#3085d6'
                });
                return;
            }

            e.preventDefault();

            const editingId = this.dataset.editingId;
            const method = editingId ? "PUT" : "POST";
            const url = editingId ? `/api/travelplans/${editingId}` : "/api/travelplans";

            const data = {
                id: editingId ? parseInt(editingId) : 0,
                destination: document.getElementById("destination").value,
                country: document.getElementById("country").value,
                duration: document.getElementById("duration").value,
                budget: parseFloat(document.getElementById("budget").value),
                travelModeId: parseInt(document.getElementById("mode").value)
            };

            const response = await fetch(url, {
                method: method,
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(data)
            });

            if (response.ok) {
                Swal.fire({
                    title: editingId ? "Trip Updated!" : "Trip Booked!",
                    html: `<strong>${data.destination}</strong> for <strong>${data.duration}</strong> has been successfully ${editingId ? "updated" : "booked"}!`,
                    icon: 'success',
                    confirmButtonText: 'Great!'
                });

                document.getElementById("bookNowForm").reset();
                delete this.dataset.editingId;
                loadTrips();
                fetchWeather(data.country);
            } else {
                Swal.fire({
                    title: "Error!",
                    text: "Failed to save your trip. Please try again.",
                    icon: "error"
                });
            }
        });

        async function loadTrips() {
            const response = await fetch("/api/travelplans");
            const trips = await response.json();
            const tbody = document.querySelector("#savedTripsTable tbody");
            tbody.innerHTML = "";

            trips.forEach(trip => {
                const row = document.createElement("tr");
                row.innerHTML = `
                    <td>${trip.destination}</td>
                    <td>${trip.country}</td>
                    <td>${trip.duration}</td>
                    <td>${trip.budget}</td>
                    <td>${trip.travelMode?.name || '-'}</td>
                    <td>
                        <button onclick="editTrip(${trip.id})">Edit</button>
                        <button onclick="deleteTrip(${trip.id})">Delete</button>
                    </td>
                `;
                tbody.appendChild(row);
            });
        }

        async function editTrip(id) {
            const res = await fetch(`/api/travelplans/${id}`);
            const trip = await res.json();

            document.getElementById("destination").value = trip.destination;
            document.getElementById("country").value = trip.country;
            document.getElementById("duration").value = trip.duration;
            document.getElementById("budget").value = trip.budget;
            document.getElementById("mode").value = trip.travelModeId;

            document.getElementById("bookNowForm").dataset.editingId = trip.id;
        }

        async function deleteTrip(id) {
            const confirmed = await Swal.fire({
                title: 'Are you sure?',
                text: "This will permanently delete the trip.",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, delete it!'
            });

            if (!confirmed.isConfirmed) return;

            const res = await fetch(`/api/travelplans/${id}`, {
                method: "DELETE"
            });

            if (res.ok) {
                loadTrips();
            } else {
                Swal.fire("Error", "Failed to delete trip.", "error");
            }
        }

        function cancelEdit() {
            document.getElementById("bookNowForm").reset();
            delete document.getElementById("bookNowForm").dataset.editingId;
        }

        async function fetchCountryFromDestination() {
            const destination = document.getElementById("destination").value.trim();
            const countryInput = document.getElementById("country");

            if (!destination || countryInput.value.trim()) return;

            try {
                const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${encodeURIComponent(destination)}`);
                const results = await response.json();

                if (results.length > 0 && results[0].address && results[0].address.country) {
                    countryInput.value = results[0].address.country;
                } else if (results.length > 0 && results[0].display_name) {
                    const parts = results[0].display_name.split(",").map(p => p.trim());
                    countryInput.value = parts[parts.length - 1];
                }
            } catch (error) {
                console.error("Could not auto-detect country from destination:", error);
            }
        }

        document.getElementById("destination").addEventListener("blur", fetchCountryFromDestination);

        window.addEventListener("DOMContentLoaded", () => {
            loadTravelModes();
            loadTrips();
        });
    </script>
}
